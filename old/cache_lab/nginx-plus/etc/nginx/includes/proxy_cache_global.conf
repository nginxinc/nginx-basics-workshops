# Proxy Cache configuration
#
proxy_cache_path /var/cache/nginx
                 levels=1:2
                 keys_zone=image_cache:10m
                 max_size=100m
                 inactive=60m
                 use_temp_path=off;

# NGINX Plus caches all responses to requests made with the HTTP GET and HEAD
# The proxy_cache_key directive along with variables to define what constitutes 
# a cache hit or miss. 
proxy_cache_key $scheme$proxy_host$request_uri;
# This can be placed in	the http, server or location context
# The default proxy_cache_key, which will fit most use cases, is "$scheme$proxy_host$request_uri".
# We can easily add varibles to create distinct cache objects, unqiue to each user e.g. 
#$scheme$proxy_host$request_uri$http_user_agent$cookie_jessionid;
#
# Cache Purge
#
# Restrict Cache Purge API calls
# Use geo to allow specific subnets to access purge API. 
# $purge_allowed is set 1 when request is made from allowed-listed IP
# geoip2 module required:
# https://docs.nginx.com/nginx/admin-guide/dynamic-modules/geoip2/
# https://docs.nginx.com/nginx/admin-guide/security-controls/controlling-access-by-geoip/

#geo $purge_allowed {
#  127.0.0.1 1; # allow from localhost
#  172.19.0.0/24 1; # allow a private subnet
#  10.1.1.9 1; # allow from selected IP i.e jumphost
#  default 0; # deny from other
#}

# NGINX checks if the PURGE method is used in a request, and, if so,
# analyzes the client IP address. If the IP address is whitelisted,
# then the $purge_method is set to $purge_allowed: 1 permits purging, and 0 denies it.

# $request_method is set to the value of $purge_allowed
#map $request_method $purge_method {
#  PURGE $purge_allowed; 
#  default 0;
#}
